####################################################
# DVrouter.py
# Name:
# BU ID:
#####################################################

import sys
from collections import defaultdict
from router import Router
from packet import Packet
from json import dumps, loads

import networkx as nx

class DVrouter(Router):
    """Distance vector routing protocol implementation."""

    def __init__(self, addr, heartbeatTime):
        """TODO: add your own class fields and initialization code here"""
        Router.__init__(self, addr)  # initialize superclass - don't remove
        self.heartbeatTime = heartbeatTime
        self.last_time = 0
        # Hints: initialize local state

        # format: destination : distance aka cost
        self.dis_vec = {}
        # format: destination : distance vector
        self.all_dis_vec = {}

        # format: addr: port
        self.neighbors = {}

        # format dstAddr:port
        self.fwd_table = {}

        # for topology & calculating cost
        self.G = nx.Graph()
        # add self to network graph
        self.G.add_node(self.addr)

        pass

    def handlePacket(self, port, packet):
        """TODO: process incoming packet"""
        if packet.isTraceroute():
            # Hints: this is a normal data packet
            # if the forwarding table contains packet.dstAddr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            
            # if destination in forwarding table
            if packet.dstAddr in self.fwd_table:
                # and if forwarding table has a port (router) for that destination
                if self.fwd_table[packet.dstAddr] != 0:
                    # send the pkt
                    self.send(self.fwd_table[packet.dstAddr], packet)
            pass
        else:
            # Hints: this is a routing packet generated by your routing protocol
            # if the received distance vector is different
            #   update the local copy of the distance vector
            #   update the distance vector of this router
            #   update the forwarding table
            #   broadcast the distance vector of this router to neighbors

            # de-json packet content
            recv_dis_vec = loads(packet.content)
            
            update = False
            # if there's an DV for that address ...
            if packet.srcAddr in self.all_dis_vec:
                # if the DV recieved and the current entry are different
                if not recv_dis_vec == self.all_dis_vec[packet.srcAddr]:
                    update = True
                    self.all_dis_vec[packet.srcAddr] = recv_dis_vec
            else:
                # otherwise, there is yet a DV for that address --> must add DV
                update = True
                self.all_dis_vec[packet.srcAddr] = recv_dis_vec
            # if new DV added to local collection of DV's
            if update:
                # if map G has these node
                if self.G.has_node(packet.srcAddr):
                    # remove that node, then add back to start from scratch
                    self.G.remove_node(packet.srcAddr)
                    self.G.add_node(packet.srcAddr)
            
            for address in recv_dis_vec:
                # loop through recieved distance vector that correspond to that source address
                # And remove each edge for that source addr
                if self.G.has_edge(packet.srcAddr, address):
                    self.G.remove_edge(packet.srcAddr, address)
                    self.G.add_edge(packet.srcAddr, weight=recv_dis_vec[address])
            
            # add src's neighbors to forward table --> discovering new nodes
            # dont add myself (b/c first condition doesnt tick since not in my own fowarding table)
            # initalize address: port --> 0
            if not address in self.fwd_table and address !=self.addr:
                self.fwd_table[address] = 0
            
            # re-calculate DV 
            pred, dist = nx.bellman_ford(self.G, self.addr, weight='weight')
            
            # not completely sure what to do with pred and dist!!
            # update own DV
            self.dis_vec = dist
            # update fowarding table
            for dst in self.fwd_table:
                try:
                    self.fwd_table[dst] = self.neighbors[pred[dst]]
                    # pred[dst] --> precedessor for that dst
                    # self.neighbors[...] --> port (of neighbor) to get to that final dst
                    # am i using neighbors properly, is this okay???
                except:
                    self.fwd_table[dst] = 0 
            # forward updated DV to neighbors
            for dst in self.neighbors:
                self.send(self.neighbors[dst], packet)
                pass


    def handleNewLink(self, port, endpoint, cost):
        """TODO: handle new link"""
        # update the distance vector of this router
        # update the forwarding table
        # broadcast the distance vector of this router to neighbors

        # create new entry in own distance vector, neighbors, fowarding table
        self.dis_vec[endpoint] = cost
        self.neighbors[endpoint] = port
        self.fwd_table[endpoint] = port

        self.G.add_node(endpoint)
        self.G.add_edge(self.addr, endpoint, weight='weight')
        
        # update forwarding table
        for dst in self.fwd_table:
            try:
                self.fwd_table[dst] = self.neighbors[pred[dst]]
            except:
                self.fwd_table[dst] = 0 
        # fowarding to neighbors
        for dst in self.neighbors:
            pkt = Packet(kind=Packet.ROUTING, srcAddr=self.addr, dstAddr=dst)
            pkt.content= dumps([self.dis_vec])
            self.send(self.neighbors[dst], pkt)
            pass


    def handleRemoveLink(self, port):
        """TODO: handle removed link"""
        # update the distance vector of this router
        # update the forwarding table
        # broadcast the distance vector of this router to neighbors

        # update distance vector
        for friend in self.neighbors:
            if self.neighbors[friend] == port:
                to_remove = friend
                break
        
        self.G.remove_edge(self.addr, to_remove)
        self.dis_vec.pop(to_remove)
        self.neighbors.pop(to_remove)
        
        # update forwarding table
        for dst in self.fwd_table:
            try:
                self.fwd_table[dst] = self.neighbors[pred[dst]]
            except:
                self.fwd_table[dst] = 0

        # forward to all neighbors
        for dst in self.neighbors:
            pkt = Packet(kind=Packet.ROUTING, srcAddr=self.addr, dstAddr=dst)
            pkt.content= dumps([self.dis_vec])
            self.send(self.neighbors[dst], pkt)
            pass


    def handleTime(self, timeMillisecs):
        """TODO: handle current time"""
        if timeMillisecs - self.last_time >= self.heartbeatTime:
            self.last_time = timeMillisecs
            # broadcast the distance vector of this router to neighbors
            # forward to all neighbors
            for dst in self.neighbors:
                pkt = Packet(kind=Packet.ROUTING, srcAddr=self.addr, dstAddr=dst)
                pkt.content= dumps([self.dis_vec])
                self.send(self.neighbors[dst], pkt)
                pass

    def debugString(self):
        """TODO: generate a string for debugging in network visualizer"""
        return ""
